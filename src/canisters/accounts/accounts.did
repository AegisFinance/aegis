type Account = record { owner : principal; subaccount : opt blob };
type AegisAccountInfo = record { user_name : opt text; user_id : nat64 };
type BitcoinNetwork = variant { mainnet; regtest; testnet };
type CanisterName = variant { ICP; CKBTCMINTER; CKETHMINTER; CKBTC; CKETH };
type ConvertCkBTCResult = variant {
  ConvertSuccess : nat;
  IcrcTransferResult : IcrcTransferResult;
  ErrMessage : text;
  RetrieveBtcError : RetrieveBtcError;
};
type IcrcTransferResult = variant {
  TransferErrorString : text;
  TransferErrorMessage : TransferError;
  TransferSuccess : nat;
};
type InitArgs = record { bitcoin_network : BitcoinNetwork };
type Metric = variant { UserCounts };
type MetricValues = variant { UserCounts : nat64 };
type Result = variant { Ok : bool; Err : text };
type Result_1 = variant { Ok; Err : text };
type RetrieveBtcError = variant {
  MalformedAddress : text;
  GenericError : record { error_message : text; error_code : nat64 };
  TemporarilyUnavailable : text;
  AlreadyProcessing;
  AmountTooLow : nat64;
  InsufficientFunds : record { balance : nat64 };
};
type RetrieveBtcOk = record { block_index : nat64 };
type RetrieveBtcResult = variant {
  RetrieveBtcString : text;
  RetrieveBtcOk : RetrieveBtcOk;
  RetrieveBtcError : RetrieveBtcError;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
service : (InitArgs) -> {
  convert_ckbtc : (text, nat) -> (ConvertCkBTCResult);
  create_account : () -> (Result);
  get_account : () -> (opt AegisAccountInfo) query;
  get_balance : (CanisterName) -> (nat) query;
  get_bitcoin_network : () -> (BitcoinNetwork) query;
  get_btc_address : () -> (text);
  get_canister_id : (CanisterName) -> (principal) query;
  get_metrics : (Metric) -> (MetricValues) query;
  principal_to_eth_address : (principal) -> (text) query;
  principal_to_subaccount : (principal) -> (blob) query;
  retrieve_btc : (text, nat) -> (RetrieveBtcResult);
  set_canister_id : (CanisterName, principal) -> ();
  transfer_from_account : (CanisterName, opt Account, nat) -> (
      IcrcTransferResult,
    );
  update_account_user_name : (text) -> (Result_1);
}
